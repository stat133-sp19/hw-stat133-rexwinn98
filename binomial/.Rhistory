return(var[1:6])
}
summary(bin1)
#' @export
summary.binvar<- function(binvar){
return(var)
}
bin1
summary(bin1)
#' @export
summary.binvar<- function(binvar){
return(binvar)
}
summary(bin1)
#' @title Binomial Mean
#' @description Returns mean of binomial dist
#' @param trials number of trials
#' @param prob probability that a trial will be a success
#' @return Mean
#' @export
#' @examples bin_cumulative(5, .5)
bin_mean <- function(trials, prob){
if (check_trials(trials) == TRUE & check_prob(prob) ==    TRUE){
return(aux_mean(trials, prob))
} else {
return(check_trials(trials) & check_prob(prob))
}
}
bin_mean(5,.5)
#' @title Binomial Variance
#' @description Returns variance of binomial dist
#' @param trials number of trials
#' @param prob probability that a trial will be a success
#' @return Variance
#' @export
#' @examples bin_cumulative(5, .5)
bin_variance <- function(trials, prob){
if (check_trials(trials) == TRUE & check_prob(prob) ==    TRUE){
return(aux_variance(trials, prob))
} else {
return(check_trials(trials) & check_prob(prob))
}
}
#' @title Binomial Mode
#' @description Returns Mode of binomial dist
#' @param trials number of trials
#' @param prob probability that a trial will be a success
#' @return mode
#' @export
#' @examples bin_cumulative(5, .5)
bin_mean <- function(trials, prob){
if (check_trials(trials) == TRUE & check_prob(prob) ==    TRUE){
return(aux_mode(trials, prob))
} else {
return(check_trials(trials) & check_prob(prob))
}
}
bin_mode(5, 5)
bin_mode(5, .5)
#' @title Binomial Mean
#' @description Returns mean of binomial dist
#' @param trials number of trials
#' @param prob probability that a trial will be a success
#' @return Mean
#' @export
#' @examples bin_cumulative(5, .5)
bin_mean <- function(trials, prob){
if (check_trials(trials) == TRUE & check_prob(prob) ==    TRUE){
return(aux_mean(trials, prob))
} else {
return(check_trials(trials) & check_prob(prob))
}
}
#' @title Binomial Variance
#' @description Returns variance of binomial dist
#' @param trials number of trials
#' @param prob probability that a trial will be a success
#' @return Variance
#' @export
#' @examples bin_cumulative(5, .5)
bin_variance <- function(trials, prob){
if (check_trials(trials) == TRUE & check_prob(prob) ==    TRUE){
return(aux_variance(trials, prob))
} else {
return(check_trials(trials) & check_prob(prob))
}
}
#' @title Binomial Mode
#' @description Returns Mode of binomial dist
#' @param trials number of trials
#' @param prob probability that a trial will be a success
#' @return mode
#' @export
#' @examples bin_cumulative(5, .5)
bin_mode <- function(trials, prob){
if (check_trials(trials) == TRUE & check_prob(prob) ==    TRUE){
return(aux_mode(trials, prob))
} else {
return(check_trials(trials) & check_prob(prob))
}
}
bin_mode(5, .5)
#' @title Binomial Skewness
#' @description Returns skewness of binomial dist
#' @param trials number of trials
#' @param prob probability that a trial will be a success
#' @return skewedness
#' @export
#' @examples bin_cumulative(5, .5)
bin_skewness <- function(trials, prob){
if (check_trials(trials) == TRUE & check_prob(prob) ==    TRUE){
return(aux_skewness(trials, prob))
} else {
return(check_trials(trials) & check_prob(prob))
}
}
#' @title Binomial kurtosis
#' @description Returns kurtosis of binomial dist
#' @param trials number of trials
#' @param prob probability that a trial will be a success
#' @return Kurtosis
#' @export
#' @examples bin_cumulative(5, .5)
bin_kurtosis <- function(trials, prob){
if (check_trials(trials) == TRUE & check_prob(prob) ==    TRUE){
return(aux_kurtosis(trials, prob))
} else {
return(check_trials(trials) & check_prob(prob))
}
}
bin_kurtosis(5, .5)
bin_skewness(5, .5)
source('C:/Users/Rex Winn/Desktop/workout3rexwinn/R/binomial.R', echo=TRUE)
install.packages("devtools")
#' @export
summary.binvar<- function(binvar){
}
#' @export
summary.binvar<- function(binvar){
return(c(binvar[1], binvar[2]))
}
summmary(bin1)
summary(bin1)
#' @export
summary.binvar<- function(binvar){
return(c(binvar[1], binvar[2], bin[4], bin[3], bin[6], bin[7], bin[5]))
}
summary(bin1)
bin1 <- bin_variable(5, .5)
summary(bin1)
#' @export
summary.binvar<- function(binvar){
return(c(binvar[1], binvar[2], binvar[4], binvar[3], binvar[6], binvar[7], binvar[5]))
}
summary(bin1)
#' @export
print.summary.binvar <- function(binvar){
p <- paste("trials, mean, variance, mode, skewness, kurtosis", c(binvar[1], binvar[2], binvar[4], binvar[3], binvar[6], binvar[7], binvar[5]))
print(p)
}
summary(bin1)
#' @export
print.summary.binvar <- function(binvar){
p <- paste("trials, mean, variance, mode, skewness, kurtosis", c(binvar[1], binvar[2], binvar[4], binvar[3], binvar[6], binvar[7], binvar[5]))
print(p)
}
summary(bin1)
print(summary(bin1))
print.summary(bin1)
print.summary.binvar(bin1)
document()
library("devtools")
library(roxygen2)
document()
install.packages("devtools")
document()
library(testthat)
source("binomial.R")
cd
setwd(desktop)
wd
cd
setwd("C:/Users/Rex Winn/Desktop/binomial/R")
source("binomial.R")
source("binomial.R")
context("Test check prob")
test_that("check prob works as expected", {
x <- .5
expect_equal(stat_range(x), TRUE)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'logical')
})
context("Test check prob")
test_that("check prob works as expected", {
x <- .5
expect_equal(check_prob(x), TRUE)
expect_length(check_prob(x), 1)
expect_type(check_prob(x), 'logical')
})
context("Test check trials")
test_that("check trials works as expected", {
x <- .5
expect_equal(check_prob(x), FALSE)
expect_length(check_prob(x), 1)
expect_type(check_prob(x), 'logical')
})
context("Test check trials")
test_that("check trials works as expected", {
x <- .5
expect_equal(check_trials(x), FALSE)
expect_length(check_trials(x), 1)
expect_type(check_trials(x), 'logical')
})
context("Test check trials")
test_that("check trials works as expected", {
x <- 5
expect_equal(check_trials(x), TRUE)
expect_length(check_trials(x), 1)
expect_type(check_trials(x), 'logical')
})
context("Test check success")
test_that("check works as expected", {
x <- 5
y <- 6
expect_equal(check_success(x, y), TRUE)
expect_length(check_success(x, y), 1)
expect_type(check_success(x, y), 'logical')
})
test_that("check works as expected", {
x <- 5
y <- 6
expect_equal(check_success(x, y), TRUE)
expect_length(check_success(x, y), 1)
expect_type(check_success(x, y), 'logical')
})
test_that("aux_mean works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_mean(x, p), 2.5)
expect_length(aux_mean(x, p), 1)
expect_type(aux_mean(x, p), 'double')
})
aux_variance(5, .5)
aux_mode(5, .5)
test_that("aux_mode works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_mode(x, p), 4)
expect_length(aux_mode(x, p), 1)
expect_type(aux_mode(x, p), 'double')
})
test_that("aux_mode works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_mode(x, p), 4)
expect_length(aux_mode(x, p), 1)
expect_type(aux_mode(x, p), 'integer')
})
expect_equal(aux_mode(x, p), 3)
test_that("aux_mode works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_mode(x, p), 3)
expect_length(aux_mode(x, p), 1)
expect_type(aux_mode(x, p), 'integer')
})
aux_skewness(5, .5)
test_that("aux_skewness works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_skewness(x, p), 0)
expect_length(aux_skewness(x, p), 1)
expect_type(aux_skewness(x, p), 'double')
})
aux_kurtosis(5, .5)
test_that("aux_kurtosis works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_kurtosis(x, p), -.4)
expect_length(aux_kurtosis(x, p), 1)
expect_type(aux_kurtosis(x, p), 'double')
})
bin_choose(y,x)
bin_choose(6, 5)
expect_equal(bin_choose(y, x), 6)
context("tests for the binomial functions")
test_that("bin_choose works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_choose(y, x), 6)
expect_length(aux_mode(x, p), 1)
expect_type(aux_mode(x, p), 'integer')
})
test_that("bin_choose works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_choose(y, x), 6)
expect_length(bin-choose(x, p), 1)
expect_type(bin_choose(x, p), 'integer')
})
expect_type(bin_choose(y, x), 'integer')
test_that("bin_choose works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_choose(y, x), 6)
expect_length(bin-choose(y, x), 1)
expect_type(bin_choose(y, x), 'integer')
})
bin_choose(6, 5)
expect_length(bin_choose(y, x), 1)
context("tests for the binomial functions")
test_that("bin_choose works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_choose(y, x), 6)
expect_length(bin_choose(y, x), 1)
expect_type(bin_choose(y, x), 'integer')
})
test_that("bin_choose works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_choose(y, x), 6)
expect_length(bin_choose(y, x), 1)
expect_type(bin_choose(y, x), 'double')
})
bin_choose(5,6,.5)
bin_probability(5, 6, .5)
expect_equal(bin_probability(x, y, p), 0.09375)
test_that("bin_probability works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_probability(x, y, p), 0.09375)
expect_length(aux_mode(x, y, p), 1)
expect_type(aux_mode(x, y, p), "double")
})
test_that("bin_probability works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_probability(x, y, p), 0.09375)
expect_length(bin_probability(x, y, p), 1)
expect_type(bin_probability(x, y, p), "double")
})
expect_type(bin_probability(y, p), "data.frame")
expect_type(bin_distribution(y, p), "data.frame")
test_that("bin_distribution works as expected", {
p <- .5
x <- 5
y <- 6
expect_length(bin_distribution(y, p), 2)
expect_type(bin_distribution(y, p), "data.frame")
})
expect_type(bin_distribution(y, p), "list")
test_that("bin_distribution works as expected", {
p <- .5
x <- 5
y <- 6
expect_length(bin_distribution(y, p), 2)
expect_type(bin_distribution(y, p), "list")
})
test_that("bin_distribution works as expected", {
p <- .5
x <- 5
y <- 6
expect_length(bin_distribution(y, p)[1], y)
expect_length(bin_distribution(y, p), 2)
expect_type(bin_distribution(y, p), "list")
})
test_that("bin_distribution works as expected", {
p <- .5
x <- 5
y <- 6
expect_length(bin_distribution(y, p)[[1]], y)
expect_length(bin_distribution(y, p), 2)
expect_type(bin_distribution(y, p), "list")
})
test_that("bin_distribution works as expected", {
p <- .5
x <- 5
y <- 6
expect_length(bin_distribution(y, p)[[1]], y + 1)
expect_length(bin_distribution(y, p), 2)
expect_type(bin_distribution(y, p), "list")
})
test_that("bin_distribution works as expected", {
p <- .5
x <- 5
y <- 6
expect_length(bin_cumulative(y, p)[[1]], y + 1)
expect_length(bin_cumulative(y, p), 3)
expect_type(bin_distribution(y, p), "list")
})
source('C:/Users/Rex Winn/Desktop/binomial/tests/tests.R', echo=TRUE)
install.packages("devtools")
source('~/.active-rstudio-document', echo=TRUE)
test_that("check success works as expected", {
x <- 5
y <- 6
expect_equal(check_success(x, y), TRUE)
expect_length(check_success(x, y), 1)
expect_type(check_success(x, y), 'logical')
})
test_that("check trials works as expected", {
x <- 5
expect_equal(check_trials(x), TRUE)
expect_length(check_trials(x), 1)
expect_type(check_trials(x), 'logical')
})
test_that("check prob works as expected", {
x <- .5
expect_equal(check_prob(x), TRUE)
expect_length(check_prob(x), 1)
expect_type(check_prob(x), 'logical')
})
library(testthat)
source("binomial.R")
install.packages("devtools")
test_that("aux_mean works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_mean(x, p), 2.5)
expect_length(aux_mean(x, p), 1)
expect_type(aux_mean(x, p), 'double')
})
library(testthat)
test_that("aux_mean works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_mean(x, p), 2.5)
expect_length(aux_mean(x, p), 1)
expect_type(aux_mean(x, p), 'double')
})
test_that("aux_variance works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_variance(x, p), 1.25)
expect_length(aux_variance(x, p), 1)
expect_type(aux_variance(x, p), 'double')
})
test_that("aux_mode works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_mode(x, p), 3)
expect_length(aux_mode(x, p), 1)
expect_type(aux_mode(x, p), 'integer')
})
test_that("aux_skewness works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_skewness(x, p), 0)
expect_length(aux_skewness(x, p), 1)
expect_type(aux_skewness(x, p), 'double')
})
test_that("aux_kurtosis works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(aux_kurtosis(x, p), -.4)
expect_length(aux_kurtosis(x, p), 1)
expect_type(aux_kurtosis(x, p), 'double')
})
library(testthat)
context("tests for the binomial functions")
test_that("bin_choose works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_choose(y, x), 6)
expect_length(bin_choose(y, x), 1)
expect_type(bin_choose(y, x), 'double')
})
test_that("bin_probability works as expected", {
p <- .5
x <- 5
y <- 6
expect_equal(bin_probability(x, y, p), 0.09375)
expect_length(bin_probability(x, y, p), 1)
expect_type(bin_probability(x, y, p), "double")
})
test_that("bin_distribution works as expected", {
p <- .5
x <- 5
y <- 6
expect_length(bin_distribution(y, p)[[1]], y + 1)
expect_length(bin_distribution(y, p), 2)
expect_type(bin_distribution(y, p), "list")
})
test_that("bin_distribution works as expected", {
p <- .5
x <- 5
y <- 6
expect_length(bin_cumulative(y, p)[[1]], y + 1)
expect_length(bin_cumulative(y, p), 3)
expect_type(bin_distribution(y, p), "list")
})
